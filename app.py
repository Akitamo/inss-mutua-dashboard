"""
Dashboard INSS vs Mutua - An√°lisis de Duraci√≥n de Bajas Laborales
===============================================================

Aplicaci√≥n Streamlit para an√°lisis comparativo de duraci√≥n de bajas
entre INSS y Mutua, con visualizaci√≥n de percentiles y filtros interactivos.

Autor: Equipo Digitalizaci√≥n - Ibermutua
Fecha: 2025
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from matplotlib.patches import Patch
from matplotlib.lines import Line2D
from io import StringIO
import plotly.graph_objects as go
import plotly.express as px
import sys
import os

# A√±adir el directorio actual al path para importaciones
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Importar m√≥dulos locales
try:
    from src.data_processor import DataProcessor
    from src.visualizations import VisualizationManager
    from config import CONFIG
    imports_ok = True
except ImportError as e:
    st.error(f"Error al importar m√≥dulos: {str(e)}")
    imports_ok = False

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Dashboard INSS vs Mutua",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        color: #2E5BFF;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .sub-header {
        color: #666;
        font-size: 1.2rem;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #2E5BFF;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Header en √°rea principal
    st.markdown('<h1 class="main-header">üè• Dashboard INSS vs Mutua</h1>', 
                unsafe_allow_html=True)
    st.markdown('<p class="sub-header">An√°lisis comparativo de duraci√≥n de bajas laborales</p>', 
                unsafe_allow_html=True)
    
    # Verificar que las importaciones funcionaron
    if not imports_ok:
        st.error("‚ùå Error en las importaciones. Verifica que todos los m√≥dulos est√©n disponibles.")
        return
    
    # Inicializar variables
    df_filtered = None
    
    # Sidebar - Solo upload y filtros
    with st.sidebar:
        st.header("üì§ Carga de Datos")
        
        uploaded_file = st.file_uploader(
            "Selecciona archivo Excel",
            type=['xlsx', 'xls'],
            help="Archivo con datos de an√°lisis INSS vs Mutua"
        )
        
        if uploaded_file is not None:
            try:
                # Procesar datos
                processor = DataProcessor()
                df = processor.load_and_process_data(uploaded_file)
                
                if df is not None:
                    st.success(f"‚úÖ Datos cargados: {len(df)} registros")
                    
                    # Filtros din√°micos
                    st.header("üîç Filtros")
                    
                    # Filtro por diagn√≥stico
                    diagnosticos = st.multiselect(
                        "Diagn√≥sticos",
                        options=df['Diagn√≥stico'].unique(),
                        default=df['Diagn√≥stico'].unique()[:5] if len(df['Diagn√≥stico'].unique()) >= 5 else df['Diagn√≥stico'].unique()
                    )
                    
                    # Filtro por g√©nero
                    genero = st.selectbox(
                        "G√©nero",
                        options=['Todos'] + list(df['Cod Genero'].unique())
                    )
                    
                    # Filtro por edad
                    edad_grupos = st.multiselect(
                        "Grupos de Edad",
                        options=df['Gr Edad 10'].unique(),
                        default=df['Gr Edad 10'].unique()
                    )
                    
                    # Filtro por n√∫mero de episodios
                    if 'Count Episodios' in df.columns:
                        episodios_range = st.slider(
                            "Rango de Episodios",
                            min_value=int(df['Count Episodios'].min()),
                            max_value=int(df['Count Episodios'].max()),
                            value=(int(df['Count Episodios'].min()), 
                                   int(df['Count Episodios'].max()))
                        )
                    else:
                        episodios_range = (1, 1000)
                    
                    # Aplicar filtros
                    df_filtered = processor.apply_filters(
                        df, diagnosticos, genero, edad_grupos, episodios_range
                    )
                else:
                    st.error("‚ùå Error al procesar el archivo")
            
            except Exception as e:
                st.error(f"‚ùå Error al procesar datos: {str(e)}")
        else:
            st.info("üëÜ Sube un archivo Excel para comenzar")
            
            # Mostrar datos de ejemplo
            st.subheader("üìä Formato de Datos Esperado")
            st.code("""
            Columnas requeridas:
            - Des Cie9 3dig (Diagn√≥stico)
            - Gr Ocupac (Grupo Ocupacional)
            - Cod Genero (C√≥digo G√©nero)
            - Gr Edad 10 (Grupo Edad)
            - CASO (Caso)
            - Count (Id Episodio) (N√∫mero de Episodios)
            - Durestd Inss min (Duraci√≥n Est√°ndar INSS)
            - Duropt Inss min (Duraci√≥n √ìptima INSS)
            - Minmin, P20min, P40min, P60min, P80min, P99min (Percentiles)
            """)

    # √ÅREA PRINCIPAL - Aqu√≠ va el dashboard
    if df_filtered is not None:
        if not df_filtered.empty:
            display_dashboard(df_filtered)
        else:
            st.warning("‚ö†Ô∏è No hay datos con los filtros aplicados")
    else:
        # Placeholder cuando no hay datos
        st.info("üìÅ **Instrucciones de Uso:**")
        st.write("1. Sube tu archivo Excel usando el panel lateral")
        st.write("2. Ajusta los filtros seg√∫n tus necesidades")
        st.write("3. Visualiza los resultados comparativos")
        
        st.info("üìã **Caracter√≠sticas del Dashboard:**")
        st.write("‚Ä¢ An√°lisis comparativo INSS vs Mutua")
        st.write("‚Ä¢ Visualizaci√≥n de percentiles con gradientes")
        st.write("‚Ä¢ Filtros din√°micos por diagn√≥stico, g√©nero y edad")
        st.write("‚Ä¢ M√©tricas resumen y estad√≠sticas detalladas")

def display_dashboard(df):
    """Mostrar dashboard principal con m√©tricas y visualizaciones"""
    
    try:
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìä Total Registros",
                len(df),
                help="N√∫mero total de registros filtrados"
            )
        
        with col2:
            if 'Count Episodios' in df.columns:
                st.metric(
                    "üìà Total Episodios",
                    f"{df['Count Episodios'].sum():,}",
                    help="Suma total de episodios"
                )
        
        with col3:
            if 'Durestd Inss min' in df.columns:
                st.metric(
                    "‚è±Ô∏è Duraci√≥n Media INSS",
                    f"{df['Durestd Inss min'].mean():.1f} d√≠as",
                    help="Duraci√≥n promedio est√°ndar INSS"
                )
        
        with col4:
            st.metric(
                "üè• Diagn√≥sticos",
                df['Diagn√≥stico'].nunique(),
                help="N√∫mero de diagn√≥sticos √∫nicos"
            )
        
        # Visualizaci√≥n principal
        st.header("üìà Visualizaci√≥n Comparativa")
        
        # Crear visualizaci√≥n
        viz_manager = VisualizationManager()
        fig = viz_manager.create_comparative_chart(df)
        
        if fig:
            st.pyplot(fig)
        else:
            st.warning("‚ö†Ô∏è No se pudo generar la visualizaci√≥n")
        
        # Tabla de datos
        with st.expander("üìã Ver Datos Detallados"):
            st.dataframe(df, use_container_width=True)
        
        # Estad√≠sticas adicionales
        st.header("üìä Estad√≠sticas Adicionales")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Top 10 Diagn√≥sticos")
            top_diagnosticos = df['Diagn√≥stico'].value_counts().head(10)
            st.bar_chart(top_diagnosticos)
        
        with col2:
            st.subheader("Distribuci√≥n por G√©nero")
            if 'Cod Genero' in df.columns:
                genero_dist = df['Cod Genero'].value_counts()
                st.bar_chart(genero_dist)
    
    except Exception as e:
        st.error(f"‚ùå Error al mostrar dashboard: {str(e)}")

if __name__ == "__main__":
    main()